#Name of my workflow. Github displays the bames of my workflow in my repository's 'Actions' tab
name: Rust
#To automatically trigger the workflow
# This example uses the push event, so a workflow run is triggered every time someone pushes a change to the repository or merges a pull request
on: [push]

env:
    CARGO_TEAM_COLOR: always

  # A workflow run is made up of one or more jobs, which may run in parallel by default
  # Each job runs in a runner environment specified by runs-on
jobs:
  # Unique identifier of our job ('test'/'fmt'/'clippy'/'coverage'= unique job in its own container)
  test:
      # Sets the name 'Test' for the job, which is displayed in the Github UI
    name: Test
      # Containers must run in Linux based operating systems
    run-ons: ubuntu-latest
    steps: 
        # Downloads a copy of the code in your repository before running CI tests
      - name: Check out code repository
          uses: actions/checkout@v3
          # This uses keyword specifics that this step will run v3 of the actions/checkout action.
          # This is an action that checks out your respository onto the runner, allowing you to run scripts or other actions against your code (such as build and test tools)
          # You should use the checkout action any time your workflows will run against the repository's code.

        # This Github Action installs a Rust toolchain using rustup. It is designed for one-line, concise usage and good defaults.
      - name: Install the Rust toolchina
          uses: dtolnay/rust-toolchain@stable
        # A Github Action that implements smart caching for rust/cargo projects with sensible defaults.
      - name: Rust Cache Action
          uses: Swatinem/rust-cache@v2

      - name: Run tests
          run: cargp test

  # 'fmt' container job
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Specific to dtolany/rust-tookchain: Comma-separated string of additional components to install
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with: 
          components: clippy
      - uses: Swatinem/rust-clippy@v2
      - name: Linting
        run: cargo clippy -- -D warnings

  # "Coverage" container job
  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin
      options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Generate code coverage
        run: |
          cargo tarpaulin --verbose --workspace
